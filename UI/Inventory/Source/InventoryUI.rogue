uses Plasmacore
uses UI

class InventoryUI : PlasmacoreUI
  # A 'UI' is the manager of a tree of extended 'UIComponent' objects.
  METHODS
    method init
      # Add components to the UI.
      # Most library components are expand_to_fill by default (versus
      # fixed_size or shrink_to_fit content). That's fine for the top
      # list; we'll set the bottom panel to a fixed_height and the
      # list will fill up the rest.
      local list = UIInventoryList()
      forEach (key in Data.inventory.keys)
        list.add( key, Data.inventory[key]//quantity )
      endForEach

      local bottom_panel =
        UIComponent() subclass
          METHODS
            method on_draw: display_bounds.fill( Color.BLACK )
        endSubclass

      # Instead of making a custom class to allow the bottom panel to respond
      # to size changes, we'll make a resize handler callback.
      bottom_panel.on_resize( (panel)=>panel.fixed_height=Graphics.button_height*2 )

      local increment = UIInventoryButton( "+1", 1  )
      local decrement = UIInventoryButton( "-1", -1 )

      # Adding components together with "+" creates a UIHorizontalLayout() and
      # adds each component to it.
      bottom_panel.add( UIFiller.h + increment + UIFiller.h + decrement + UIFiller.h )

      # Stacking components with "/" creates a UIVerticalLayout() and adds each
      # component to it.
      add( UIInventoryScrollView(list) / bottom_panel )

    method draw
      # This patches a bug where a high-refresh monitor (75Hz) draws faster than
      # the update cycle (60Hz) which is usually responsible for calling request_redraw
      prior.draw
      request_redraw
endClass

class UIInventoryButton : UIWidget
  PROPERTIES
    delta : Int32

  METHODS
    method init( label:String, delta )
      prior.init( label, Graphics.font )

    method on_draw
      if (is_pressed)
        display_bounds.fill( Color.WHITE )
        color = Color.BLACK  # font color
        prior.on_draw        # let the text draw
      else
        color = Color.WHITE  # font color
        prior.on_draw
        display_bounds.draw( Color.WHITE, &thickness=Display.density*4 )
      endIf

    method on_resize
      fixed_size = Graphics.button_size

    method on_select
      broadcast_message( @{id:"step",delta:delta} )

endClass

class UIInventoryScrollView : UIScrollView
  # Normally you wouldn't need this many overrides but two of the three methods
  # are bugfixes that will also be released in the next version of Rogue.
  METHODS
    method on_select( e_press:PointerEvent, e_release:PointerEvent )
      local subcomponent = find( e_press.position )
      # Any subcomponents that could respond to this event?

      if (first_child and subcomponent)
        first_child.dispatch( e_press )
        # This may capture pointer focus

        if (UI.pointer_focus)
          if (UI.pointer_focus.is_visible and UI.pointer_focus.is_input_enabled)
            UI.pointer_focus.handle( e_release )
          else
            UI.pointer_focus.release_pointer_focus
            first_child.dispatch( e_release )
          endIf
        else
          first_child.dispatch( e_release )
        endIf

      else
        on_select_background( e_press.position )

      endIf

    method on_select_background( position:XY )
      broadcast_message( @{id:"deselect_all"} )

    method set_content_offset( new_offset:XY )
      @content_offset = new_offset.floor
endClass

class UIInventoryList : UIList
  METHODS
    method init
      anchor = Anchor.TOP

    method add( item:String, count:Int32 )
      add( UIInventoryItem(item,count) )
endClass

class UIInventoryItem : UIWidget
  PROPERTIES
    item           : String
    quantity       : Int32
    quantity_label : UILabel
    spacer         : UISpacer
    is_selected    : Logical

  METHODS
    method init( item, quantity )
      local item_label = UILabel( item, Graphics.font )

      # .anchor controls the position of fixed-size components.
      # .alignment controls the position of text within components.
      item_label.alignment = Anchor.LEFT

      quantity_label = UILabel( quantity->String, Graphics.font )
      quantity_label.alignment = Anchor.RIGHT

      spacer = UISpacer.h(0)
      add( quantity_label + spacer + item_label )

    method on_draw
      if (is_selected)
        display_bounds.fill( Color.BLACK )
        color = Color.WHITE
      else
        color = Color.BLACK
      endIf
      prior.on_draw

    method on_message( m:Value )
      if (is_selected)
        which (m//id->String)
          case "deselect_all": is_selected = false
          case "step":         quantity += m//delta->Int32
        endWhich
      endIf

    method on_resize
      fixed_height = (Graphics.font.height * 1.5).floor
      quantity_label.fixed_width = Graphics.font.measure( "000" ).x
      spacer.fixed_width = Graphics.font.measure("0").x

    method on_select
      if (is_selected) return
      broadcast_message( @{id:"deselect_all"} )
      is_selected = true

    method set_quantity( new_value:Int32 )
      if (@quantity == new_value) return
      @quantity = new_value.clamped_low(0)
      Data.inventory[ item ]//quantity = quantity # update the master copy
      if (quantity_label) quantity_label.text = quantity->String

endClass

augment StandardUIScrollViewController
  # A big kludgy bug fix
  METHODS
    method on( e:PointerEvent )
      <replace>
      if (e.is_press)
        if (not is_dragging and view.contains(e))
          if (view.capture_pointer_focus)
            decay = 0.10   # halt any scrolling going on
            is_pressed = true
            drag_time.restart
            drag_pos = e.position
            drag_start = drag_pos
            e.consume
            return
          endIf
        endIf

      elseIf (e.is_move)
        if (is_dragging)
          drag_delta = (e.position - drag_pos).yv
          drag_pos = e.position
          scroll( drag_delta * XY(0,-1) )
          e.consume
          return
        elseIf (is_pressed)
          if (e.position.distance_to(drag_pos) >= UI.drag_threshold)
            is_dragging = true
            drag_deltas.clear
            drag_pos = e.position
            e.consume
            return
          endIf
        else
          # Pass move event to children
          if (view.first_child)
            view.first_child.dispatch( e )
            return
          endIf
        endIf

      elseIf (e.is_release)
        is_pressed = false
        view.release_pointer_focus
        if (is_dragging)
          is_dragging = false
          decay = 0.10
          if (drag_deltas.count)
            local sum = XY.zero
            sum += (forEach in drag_deltas)
            local avg = sum / drag_deltas.count
            if (avg.y.abs >= 5)
              decay = 0.96
              velocity -= avg.yv
            endIf
          endIf
          e.consume
          return
        else
          decay = 0.10
          if (velocity.abs.max < 1)
            # We pressed and released list without dragging it.  Send a press/release event
            # to subcomponents.
            local e_press = e.cloned.[ type=PointerEvent.PRESS ]
            view.on_select( e_press, e )
            return
          endIf
        endIf
      endIf
endAugment

