uses Plasmacore
uses UI

class InventoryUI : PlasmacoreUI
  # A 'UI' is the manager of a tree of extended 'UIComponent' objects.
  METHODS
    method init
      # Add components to the UI.
      # Most library components are expand_to_fill by default (versus
      # fixed_size or shrink_to_fit content). That's fine for the top
      # list; we'll set the bottom panel to a fixed_height and the
      # list will fill up the rest.
      local list = UIInventoryList()
      list.add( "Alpha", 1 )
      list.add( "Beta", 2 )
      list.add( "Gamma", 3 )

      local bottom_panel = UIComponent()

      # Instead of making a custom class to allow the bottom panel to respond
      # to size changes, we'll make a resize handler callback.
      bottom_panel.on_resize( (panel)=>panel.fixed_height=Graphics.button_height*2 )

      local increment = UIInventoryButton("+1")
      local decrement = UIInventoryButton("-1")

      # Adding components together with "+" creates a UIHorizontalLayout() and
      # adds each component to it.
      bottom_panel.add( UIFiller.h + increment + UIFiller.h + decrement + UIFiller.h )

      # Stacking components with "/" creates a UIVerticalLayout() and adds each
      # component to it.
      add( UIInventoryScrollView(list) / bottom_panel )

    method draw
      # This patches a bug where a high-refresh monitor (75Hz) draws faster than
      # the update cycle (60Hz) which is usually responsible for calling request_redraw
      prior.draw
      request_redraw
endClass

class UIInventoryButton : UIWidget
  METHODS
    method init( label:String )
      prior.init( label, Graphics.font )

    method on_draw
      if (is_pressed)
        display_bounds.fill( Color.WHITE )
        color = Color.BLACK  # font color
        prior.on_draw        # let the text draw
      else
        color = Color.WHITE  # font color
        prior.on_draw
        display_bounds.draw( Color.WHITE, &thickness=Display.density*4 )
      endIf

    method on_resize
      fixed_size = Graphics.button_size
endClass

class UIInventoryScrollView : UIScrollView
  # Normally you wouldn't need to extend UIScrollView but this overrides
  # methods with a couple of bug fixes that will also be released in the next
  # version of Rogue.
  METHODS
    method on_select( e_press:PointerEvent, e_release:PointerEvent )
      local subcomponent = find( e_press.position )
      # Any subcomponents that could respond to this event?

      if (first_child and subcomponent)
        first_child.dispatch( e_press )
        # This may capture pointer focus

        if (UI.pointer_focus)
          if (UI.pointer_focus.is_visible and UI.pointer_focus.is_input_enabled)
            UI.pointer_focus.handle( e_release )
          else
            UI.pointer_focus.release_pointer_focus
            first_child.dispatch( e_release )
          endIf
        else
          first_child.dispatch( e_release )
        endIf

      else
        on_select_background( e_press.position )

      endIf

    method set_content_offset( new_offset:XY )
      @content_offset = new_offset.floor
endClass

class UIInventoryList : UIList
  METHODS
    method init
      anchor = Anchor.TOP

    method add( item:String, count:Int32 )
      add( UIInventoryItem(item,count) )
endClass

class UIInventoryItem : UIWidget
  PROPERTIES
    item        : String
    count       : Int32
    count_label : UILabel
    spacer      : UISpacer
    is_selected : Logical

  METHODS
    method init( item, count )
      local item_label = UILabel( item, Graphics.font )

      # .anchor controls the position of fixed-size components.
      # .alignment controls the position of text within components.
      item_label.alignment = Anchor.LEFT

      count_label = UILabel( count->String, Graphics.font )
      count_label.alignment = Anchor.RIGHT

      spacer = UISpacer.h(0)
      add( count_label + spacer + item_label )

    method on_draw
      if (is_selected)
        display_bounds.fill( Color.BLACK )
        color = Color.WHITE
      else
        color = Color.BLACK
      endIf
      prior.on_draw

    method on_resize
      fixed_height = (Graphics.font.height * 1.5).floor
      count_label.fixed_width = Graphics.font.measure( "000" ).x
      spacer.fixed_width = Graphics.font.measure("0").x

    method on_select
      is_selected = not is_selected

endClass

